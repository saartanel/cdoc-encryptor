name: Build and Release

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run tests
      run: mvn clean test
      
    - name: Build project
      run: mvn clean package
      
    - name: Get version from tag
      id: get_version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        elif [[ $GITHUB_EVENT_NAME == "release" ]]; then
          VERSION=${{ github.event.release.tag_name }}
          VERSION=${VERSION#v}
        else
          VERSION="snapshot-$(date +%Y%m%d-%H%M%S)"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        
    - name: Rename JAR with version
      run: |
        VERSION="${{ steps.get_version.outputs.version }}"
        cp target/cdoc-encryptor-*-jar-with-dependencies.jar cdoc-encryptor-${VERSION}-jar-with-dependencies.jar
        ls -la *.jar
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          cdoc-encryptor-${{ steps.get_version.outputs.version }}-jar-with-dependencies.jar
          target/cdoc-encryptor-*-jar-with-dependencies.jar
          pom.xml
        retention-days: 1

  scan:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      security-events: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        
    - name: Scan dependencies (pom.xml)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: 'pom.xml'
        format: 'table'
        severity: 'HIGH,CRITICAL'
        exit-code: '0'
        
    - name: Generate pom.xml SARIF report
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: 'pom.xml'
        format: 'sarif'
        output: 'trivy-pom-results.sarif'
        
    - name: Scan JAR file
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'rootfs'
        scan-ref: 'target/cdoc-encryptor-${{ needs.build.outputs.version }}-jar-with-dependencies.jar'
        format: 'table'
        severity: 'HIGH,CRITICAL'
        exit-code: '0'
        
    - name: Generate JAR SARIF report
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'rootfs'
        scan-ref: 'target/cdoc-encryptor-${{ needs.build.outputs.version }}-jar-with-dependencies.jar'
        format: 'sarif'
        output: 'trivy-jar-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: |
          trivy-pom-results.sarif
          trivy-jar-results.sarif

  release:
    runs-on: ubuntu-latest
    needs: [build, scan]
    if: github.event_name == 'release'
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        
    - name: Upload JAR to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: cdoc-encryptor-${{ needs.build.outputs.version }}-jar-with-dependencies.jar
        asset_name: cdoc-encryptor-${{ needs.build.outputs.version }}-jar-with-dependencies.jar
        asset_content_type: application/java-archive

  tag-release:
    runs-on: ubuntu-latest
    needs: [build, scan]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        
    - name: Create release for tag push
      uses: softprops/action-gh-release@v1
      with:
        files: cdoc-encryptor-${{ needs.build.outputs.version }}-jar-with-dependencies.jar
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  upload-artifacts:
    runs-on: ubuntu-latest
    needs: [build, scan]
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        
    - name: Upload artifacts for manual workflow dispatch
      uses: actions/upload-artifact@v4
      with:
        name: cdoc-encryptor-${{ needs.build.outputs.version }}-jar-with-dependencies
        path: cdoc-encryptor-${{ needs.build.outputs.version }}-jar-with-dependencies.jar
        retention-days: 30